scalar Uuid
scalar Email

type Query {
  # database queries
  songs: [Song!]!
  albums: [Album!]!
  genres: [Genre!]!
  artists: [Artist!]!
  playlists: [Playlist!]!
  user(userId: Uuid!): User!
  play(playId: Uuid!): Play!
  song(songId: Uuid!): Song!
  album(albumId: Uuid!): Album!
  genre(genreId: Uuid!): Genre!
  artist(artistId: Uuid!): Artist!
  playlist(playlistId: Uuid!): Playlist!

  # complex queries
  newAlbums: [Album!]!
  topTenSongs: [Song!]!
}

type User {
  userId: Uuid!
  email: Email!
  name: String!
  current: Song
  prev: [Song!]!
  next: [Song!]!
  queue: [Song!]!
  plays: [Play!]!
  songs: [Song!]!
  genres: [Genre!]!
  albums: [Album!]!
  artists: [Artist!]!
  playlists: [Playlist!]!
}

type Play {
  playId: Uuid!
  user: User!
  song: Song!
  dateCreated: Int!
}

type Song {
  mix: String!
  songId: Uuid!
  album: Album!
  title: String!
  duration: Int!
  discNumber: Int!
  trackNumber: Int!
  genres: [Genre!]!
  artists: [Artist!]!
  remixers: [Artist!]!
  featuring: [Artist!]!
  plays(userId: Uuid!): [Play!]
  dateAdded(userId: Uuid!): Int
  inLibrary(userId: Uuid!): Boolean!
  isCurrent(userId: Uuid!): Boolean!
  dateAddedToPlaylist(playlistid: Uuid!): Int
}

type Genre {
  name: String!
  genreId: Uuid!
  songs: [Song!]!
  plays(userId: Uuid!): [Play!]
  dateAdded(userId: Uuid!): Int
  inLibrary(userId: Uuid!): Boolean!
}

type Album {
  albumId: Uuid!
  title: String!
  released: Int!
  songs: [Song!]!
  artists: [Artist!]!
  plays(userId: Uuid!): [Play!]
  dateAdded(userId: Uuid!): Int
  inLibrary(userId: Uuid!): Boolean!
  cover(size: AlbumCoverSizes!): String!
}

type Artist {
  name: String!
  artistId: Uuid!
  songs: [Song!]!
  albums: [Album!]!
  plays(userId: Uuid!): [Play!]
  dateAdded(userId: Uuid!): Int
  inLibrary(userId: Uuid!): Boolean!
  photo(size: ArtistPhotoSizes!): String!
}

type Playlist {
  user: User!
  name: String!
  songs: [Song!]!
  playlistId: Uuid!
  dateCreated: Int!
  plays(userId: Uuid!): [Play!]
  dateAdded(userId: Uuid!): Int
  inLibrary(userId: Uuid!): Boolean!
}

type Mutation {
  userPrev(
    userId: Uuid!
  ): User!
  userPlay(
    userId: Uuid!
    songId: Uuid!
  ): User!
  userNext(
    userId: Uuid!
  ): User!
  userAddSongNext(
    userId: Uuid!
    songId: Uuid!
  ): User!
  userAddSongLater(
    userId: Uuid!
    songId: Uuid!
  ): User!
  userAddSongQueue(
    userId: Uuid!
    songId: Uuid!
  ): User!
  addUserSong(
    userId: Uuid!
    songId: Uuid!
  ): Song!
  addUserAlbum(
    userId: Uuid!
    albumId: Uuid!
  ): Album!
  addUserGenre(
    userId: Uuid!
    genreId: Uuid!
  ): Genre!
  addUserArtist(
    userId: Uuid!
    artistId: Uuid!
  ): Artist!
  rmUserSong(
    userId: Uuid!
    songId: Uuid!
  ): Song!
  rmUserAlbum(
    userId: Uuid!
    albumId: Uuid!
  ): Album!
  rmUserGenre(
    userId: Uuid!
    genreId: Uuid!
  ): Genre!
  rmUserArtist(
    userId: Uuid!
    artistId: Uuid!
  ): Artist!
  addUser(
    name: String!
    email: Email!
  ): User!
  addArtist(
    name: String!
    photo: Upload!
  ): Artist!
  addGenre(
    name: String!
  ): Genre!
  addAlbum(
    title: String!
    cover: Upload!
    artistIds: [Uuid!]!
    released: String!
  ): Album!
  addSong(
    mix: String!
    albumId: Uuid!
    title: String!
    audio: Upload!
    genreIds: [Uuid!]!
    discNumber: Int!
    artistIds: [Uuid!]!
    trackNumber: Int!
    remixerIds: [Uuid!]!
    featuringIds: [Uuid!]!
  ): Song!
  addPlaylist(
    user: Uuid!
    name: String!
    songs: [Uuid!]!
  ): Playlist!
}

enum ArtistPhotoSizes {
  MINI
  HALF
  FULL
}

enum AlbumCoverSizes {
  HALF
  FULL
}
